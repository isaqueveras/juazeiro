// Code generated by juaz. DO NOT EDIT.
// versions: v1.0.0
// source: user.juaz

package main

import (
	"context"
	"net/http"
	"net/url"
	"fmt"
	"time"

	"github.com/isaqueveras/juazeiro"
)

// Parameters data model for the parameters structure
type Parameters struct {
	Limit *int64 `json:"limit,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
	Total *bool `json:"total,omitempty"`
	UserName *string `json:"user_name,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// User data model for the user structure
type User struct {
	UserId *int64 `json:"user_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Parameters *Parameters `json:"parameters,omitempty"`
}

type IMainClient interface {
	GetUser(ctx context.Context, in *User) (*User, error)
}

type UserClient struct {
	cc juazeiro.ClientConnInterface
}

func NewMainClient(cc juazeiro.ClientConnInterface) IMainClient {
	return &UserClient{cc: cc}
}

func (c *UserClient) GetUser(ctx context.Context, in *User) (*User, error) {
	out := new(User)

	uri := "/create_account"
	if in.Parameters != nil {
		uri += _build_parameters_parameters(in.Parameters)
		in.Parameters = nil
	}

	err := c.cc.Invoke(ctx, http.MethodPost, uri, in, out)
	return out, err
}

func _build_parameters_parameters(in *Parameters) string {
	val := &url.Values{}
	if in.Limit != nil {
		val.Add("limit", fmt.Sprintf("%v", *in.Limit))
	}
	if in.Offset != nil {
		val.Add("offset", fmt.Sprintf("%v", *in.Offset))
	}
	if in.Total != nil {
		val.Add("total", fmt.Sprintf("%v", *in.Total))
	}
	if in.UserName != nil {
		val.Add("user_name", fmt.Sprintf("%v", *in.UserName))
	}
	if in.CreatedAt != nil {
		val.Add("created_at", fmt.Sprintf("%v", *in.CreatedAt))
	}
	return "?" + val.Encode()
}
